package Draw;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Image;
import javax.swing.*;
import java.awt.event.*;
import java.awt.image.BufferedImage;
import java.awt.event.MouseMotionListener;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import java.util.Random;
import java.awt.BasicStroke;
import java.awt.Font;
import java.awt.RenderingHints;

/**
 * @author Jachi Madubuko
 * @author Sam Knox
**/

public class TheDrawP extends JPanel implements MouseListener, MouseMotionListener
{
   public static TheDrawP inst; 
   private int startX, startY, endX, endY, shape, drawX, drawY, freeX, freeY, tempX, tempY;
   private int[] xPoints, yPoints;
   private static boolean forButton;
   //int free = 0;
   BufferedImage grid;
   Graphics2D gc, free;
   Color bg = Color.WHITE;
   Color fill, outline;
   
   public TheDrawP()
   {
       addMouseListener(this);      //allows the mouse to make precise shapes
       addMouseMotionListener(this);
       fill = Color.BLACK;
       outline = Color.BLACK;
       this.setVisible(true);
       this.setBackground(bg);
       yPoints = new int[2];
       xPoints = new int[2];
   }
   
   public static TheDrawP getInstance()
   {
       if(inst == null)
           inst = new TheDrawP();
       return inst;
   }
   
   public void paintComponent(Graphics g)   //method creates image buffer for shapes to be drawn on  
    { 
         super.paintComponent(g);  
         Graphics2D g2 = (Graphics2D)g;
         if(grid == null){
            int w = this.getWidth();
            int h = this.getHeight();
            grid = (BufferedImage)(this.createImage(w,h));
            gc = grid.createGraphics();
         }
         g2.drawImage(grid, null, 0, 0);
    }
   
    public ImageIcon DrawnButton(int x)
    {
        BufferedImage buf = new BufferedImage(25, 25, 2);
        Graphics2D gd = buf.createGraphics();
        forButton = true;
        drawShape(x, gd); 
        ImageIcon ii = new ImageIcon(buf);
        forButton = false;
        return ii;
    }

   public void setShape(int s)
   {
       shape=s;
       forButton = false;
   }
   
   public void stroke()
   {
	   BasicStroke newSize = TheStrokeS.getInstance().getStroke();
           gc.setStroke(newSize);
   }
   
   public void setFill(Color c)
   {
       fill = c;
   }
   
   public void setOutline(Color c)
   {
       outline = c;
   }
   
   public void drawShape(int x, Graphics2D pen)
   {
       shape = x;
       switch(shape)
       {
           case 1:
               fillrect(pen);
               break;
           case 2:
               clrrect(pen);
               break;
           case 3:
               filloval(pen);
               break;
           case 4:
               clroval(pen);
               break;
           case 5:
               line(pen);
               break;
           case 6:
               freedraw(pen);
               break;
           case 7:
               text(pen);
               break;
           default:
                    break;
       } 
       repaint();
   }
   
   public void line(Graphics2D pen)
   {
       pen.setColor(outline);
        if(true == forButton)
        {
            pen.setColor(Color.BLACK);
            pen.drawLine(5,5,20,20);
        }
        else
             gc.drawLine(startX, startY, endX, endY);
   }
   
   public void text(Graphics2D pen)
   {
       pen.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
       RenderingHints.VALUE_ANTIALIAS_ON);
       Font fonts = new Font("Serif", Font.PLAIN, fSize); //fSize will br
       pen.setFont(fonts);
       if(true == forButton)
        {
            pen.setColor(Color.BLACK);
            pen.drawString("T",1,1);
        }
       else
       {
            String txt = JOptionPane.showInputDialog("Insert text");
            gc.drawString(txt, startX , startY);
            
            repaint();
       }
   }
   public void fillrect(Graphics2D pen)
   {
       
       if(true == forButton)
       {
           pen.setColor(Color.BLACK);
           pen.fillRect(7,7,10,10);
           forButton = false;
       }
       else
       {
           gc.setColor(fill);
           if(startX <= endX)
            {
                if(startY <= endY)
                {
                    gc.fillRect(startX, startY, (endX - startX), (endY -startY));
                    gc.setColor(outline);
                    gc.drawRect(startX, startY, (endX - startX), (endY -startY));
                }
                else
                {
                    gc.fillRect(startX, endY, (endX-startX), (startY-endY));
                    gc.setColor(outline);
                    gc.drawRect(startX, endY, (endX-startX), (startY-endY));
                }
                
            }
            else
            {
                if(startY <= endY)
                {
                    gc.fillRect(endX, startY, (startX - endX), (endY - startY));
                    gc.setColor(outline);
                    gc.drawRect(endX, startY, (startX - endX), (endY - startY));
                }
                else
                {
                    gc.fillRect(endX, endY, (startX - endX), (startY- endY));
                    gc.setColor(outline);
                    gc.drawRect(endX, endY, (startX - endX), (startY- endY));
                }
            }
       }
   }
   
   
   public void clrrect(Graphics2D pen)
   {
       
       if(true == forButton)
       {
           pen.setColor(Color.BLACK);
           pen.drawRect(7,7,10,10);
           forButton = false;
       }
       else
       {
           gc.setColor(outline);
            if(startX <= endX)
            {
                if(startY <= endY)
                    gc.drawRect(startX, startY, (endX - startX), (endY -startY));
                else
                    gc.drawRect(startX, endY, (endX-startX), (startY-endY));
            }
            else
            {
                if(startY <= endY)
                    gc.drawRect(endX, startY, (startX - endX), (endY - startY));
                else
                    gc.drawRect(endX, endY, (startX - endX), (startY- endY));

            }
       }
       repaint();
   }
   
   public void filloval(Graphics2D pen)
   {
       
       if(true == forButton)
       {
           pen.setColor(Color.BLACK);
           pen.fillOval(7,7,10,10);
       }
       else
       {
           gc.setColor(fill);
            if(startX <= endX)
            {
                if(startY <= endY)
                {
                    gc.fillOval(startX, startY, (endX - startX), (endY -startY));
                    gc.setColor(outline);
                    gc.drawOval(startX, startY, (endX - startX), (endY -startY));
                    
                }
                else
                {
                    gc.fillOval(startX, endY, (endX-startX), (startY-endY));
                    gc.setColor(outline);
                    gc.drawOval(startX, endY, (endX-startX), (startY-endY));
                }
            }
            else
            {
                if(startY <= endY)
                {
                    gc.fillOval(endX, startY, (startX - endX), (endY - startY));
                    gc.setColor(outline);
                    gc.drawOval(endX, startY, (startX - endX), (endY - startY));
                }
                else
                {
                    gc.fillOval(endX, endY, (startX - endX), (startY- endY));
                    gc.setColor(outline);
                    gc.drawOval(endX, endY, (startX - endX), (startY- endY));
                }
            }
       }
   }
  
   
   public void clroval(Graphics2D pen)
   {
       
       if(true == forButton)
       {
           pen.setColor(Color.BLACK);
           pen.drawOval (7,7,10,10);
       }
       else
       {
           gc.setColor(outline);
            if(startX <= endX)
            {
                if(startY <= endY)
                    gc.drawOval(startX, startY, (endX - startX), (endY -startY));
                else
                    gc.drawOval(startX, endY, (endX-startX), (startY-endY));
            }
            else
            {
                if(startY <= endY)
                    gc.drawOval(endX, startY, (startX - endX), (endY - startY));
                else
                    gc.drawOval(endX, endY, (startX - endX), (startY- endY));
            }
       }
   }
   
   public void clr()
   {
       gc.setPaint(bg);
       gc.fillRect(0, 0, grid.getWidth(), grid.getHeight());
       repaint();
   }
   
   public void mouseExited(MouseEvent e){ }
   public void mouseEntered(MouseEvent e){}
   public void mouseClicked(MouseEvent e){}
   public void mousePressed(MouseEvent e)
   {
       startX = e.getX();
       startY = e.getY();
       freeX = e.getX();
       freeY = e.getY();
       drawX = freeX;
       drawY = freeY;
       System.out.println("Start:" + startX + " " + startY);
       
   }
   
   public void mouseDragged(MouseEvent e) 
   {
        tempX = drawX;
        tempY = drawY;
        drawX = e.getX();
        drawY = e.getY();
        endX = e.getX();
        endY = e.getY();

        xPoints[0] = tempX;
        xPoints[1] = drawX;
        yPoints[0] = tempY;
        yPoints[1] = drawY;  
        if(shape == 6)
        {
            drawShape(shape, gc);
        }
   }
   
   public void freedraw(Graphics2D pen)
   {
        if(true == forButton)
        {
            pen.setColor(Color.BLACK);
            int[] Xs = {1,15,5,10,20};
            int[] Ys = {1,5,10,15,20};
            pen.drawPolyline(Xs, Ys, 5);
        }
       pen.setColor(outline);
       pen.drawPolyline(xPoints, yPoints, 2);
   }
   public void mouseReleased(MouseEvent e)
   {
       endX = e.getX();
       endY = e.getY();
       System.out.println("End:" + endX + " " + endY);
       drawShape(shape, gc);
       
   }

  public void mouseMoved(MouseEvent e) { }

}
